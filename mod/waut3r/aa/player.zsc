/**
  * Custom player class for ZDoom.
  *
  * Very minimal measures are taken to ensure mod compatbility and network
  * safety. This may change in the future, but both my current understanding and
  * the existing documentation for ZScript, ZDoom, and networking is limited.
  * Critique is welcome.
  *
  * Much of the code simply reorganizes existing code into multiple methods to
  * counter the monolithic nature of the built-in player movement code.
  *
  * TODO:
  * - Reimplement viewbob
  */
class AaPlayer : DoomPlayer;

/**
  * A grace period for initiating the first jump after leaving the ground.
  */
const JUMP_GRACE_TICS = 3;

/**
  * The current internal button state for `AaInputButton`.
  */
enum AaInputButtonState {
  BUTTON_LOCKED,
  BUTTON_UP,
  BUTTON_DOWN
}

/**
  * Structure representing the current state of a player button, which can be
  * up, down, and "locked".
  *
  * Internally, this structure polls the `Buttons` bitfield from the player's
  * `UserCmd` structure and checks it against the internal state. If the
  * internal state is `AaPlayer.BUTTON_UP` or `AaPlayer.BUTTON_DOWN`, the button
  * state is read and stored normally. If the internal state is
  * `AaPlayer.BUTTON_LOCKED`, then the button state will only update if the
  * player releases the button, in which the state will become
  * `AaPlayer.BUTTON_UP`.
  *
  * This is useful for ignoring requested actions when they would be invalid,
  * like continuing to hold the jump button after landing, or continuing to hold
  * the run button after all stamina has been depleted.
  *
  * `Poll` is expected to be called once per tic before use.
  */
struct AaInputButton {

  /**
    * Reference to the associated player class instance.
    */
  private AaPlayer Pawn;

  /**
    * Internal button state.
    */
  private .AaPlayer.AaInputButtonState State;

  /**
    * Bitmask for calculating button state from player's `UserCmd.Buttons`
    * bitfield
    */
  private int Mask;

  /**
    * Constructor. Store a reference to the player class instance and the
    * bitmask representing the button.
    */
  void Init(AaPlayer _pawn, int _mask) {
    self.Pawn = _pawn;
    self.Mask = _mask;
  }

  /**
    * Get button state. `true` means the button was in the
    * `AaPlayer.BUTTON_DOWN` state, while `false` means the button could have
    * been `AaPlayer.BUTTON_UP` or `AaPlayer.BUTTON_LOCKED` state.
    */
  bool Get() {
    return self.State == AaPlayer.BUTTON_DOWN;
  }

  /**
    * Override the current state to `AaPlayer.BUTTON_LOCKED`. This state
    * will not update afterwards unless `Poll` detects that the player has
    * released the button, in which it will change to `AaPlayer.BUTTON_UP`.
    */
  void Lock() {
    self.State = AaPlayer.BUTTON_LOCKED;
  }

  /**
    * Update the internal button state. If the current state is
    * `AaPlayer.BUTTON_LOCKED`, then it will only update if the button is
    * released, in which it will change to `AaPlayer.BUTTON_UP`.
    */
  void Poll() {
    bool _raw = self.Pawn.Player.Cmd.Buttons & self.Mask;

    if (!_raw) {
      self.State = AaPlayer.BUTTON_UP;
    } else if (self.State != AaPlayer.BUTTON_LOCKED) {
      self.State = AaPlayer.BUTTON_DOWN;
    }
  }
}

/**
  * Structure representing the strafe input axis for the player.
  *
  * Internally, the structure reads `ForwardMove` and `SideMove` from the
  * player's `UserCmd` structure to determine the intended angle and magnitude
  * of the player.
  * 
  * Doom's forward/side scaling is removed from `ForwardMove` and `SideMove`
  * before they are normalized and mapped proportionally to polar coordinates
  * represented by `.Angle` and `.Magnitude`.
  *
  * `Poll` is expected to be called once per tic before use.
  */
struct AaInputStrafeAxis {

  /**
    * Reference to the associated player class instance.
    */
  private AaPlayer Pawn;

  /**
    * The current angle of the player's strafe input axis.
    */
  private double Angle;

  /**
    * The current magnitude of the player's strafe input axis. (In laymen's
    * terms, how far the thumb stick is moved from the center.)
    */
  private double Magnitude;

  /**
    * Constructor. Stores a reference to the player class instance.
    */
  void Init(AaPlayer _pawn) {
    self.Pawn = _pawn;
  }

  /**
    * Return the magnitude and angle.
    */
  double, double Get() {
    return self.Magnitude, self.Angle;
  }

  /**
    * Convert `ForwardMove` and `SideMove` into normalized, proportional
    * polar coordinates represented by `.Angle` and `.Magnitude`.
    */
  void Poll() {
    let _cmd = self.Pawn.Player.Cmd;

    // `NormForwardMove` and `NormSideMove` both store the walking speed
    // at 0 and running speed at 1.
    let _index = (_cmd.Buttons & BT_SPEED) ? 1 : 0;

    // Get rid of the traditional scaling and normalize in one go. Since
    // `ForwardMove` and `SideMove` are fixed 16-bit integers, we scale the
    // GameInfo values by 256.0 to produce our proportionally sized denominator.
    let _normalized_x =
      _cmd.ForwardMove / (GameInfo.NormForwardMove[_index] * 256.0);
    let _normalized_y =
      _cmd.SideMove / (GameInfo.NormSideMove[_index] * 256.0);

    // Mapping the XY values to maintain proportions and preserve magnitude
    let _scaled_x = _normalized_x * Sqrt(1.0 - (_normalized_y ** 2.0) / 2.0);
    let _scaled_y = _normalized_y * Sqrt(1.0 - (_normalized_x ** 2.0) / 2.0);

    // Convert to angle and magnitude
    self.Angle = VectorAngle(_scaled_x, _scaled_y);
    self.Magnitude = Sqrt(_scaled_x ** 2 + _scaled_y ** 2);
  }

  /**
    * Convenience function that forces the input forward with maximum force.
    *
    * This is intended for use in a reimplementation of the chainsaw.
    */
  void SetMaxForward() {
    self.Angle = 0.0;
    self.Magnitude = 1.0;
  }
}

/**
  * Structure for managing strafe axis, jump button, and run button data
  * represented in specialized structure members.
  *
  * `Poll` is expected to be called once per tic before use.
  */
struct AaInput {
  /**
    * Struct to manage and represent the state of the jump button.
    */
  .AaPlayer.AaInputButton JumpButton;

  /**
    * Struct to manage and represent the state of the speed/run button.
    */
  .AaPlayer.AaInputButton SpeedButton;

  /**
    * Struct that interprets `ForwardMove` and `SideMove` as polar coordinates.
    */
  .AaPlayer.AaInputStrafeAxis StrafeAxis;

  /**
    * Reference to the associated player class instance.
    */
  AaPlayer Pawn;

  /**
    * Constructor. Stores reference to player class instance, then calls
    * constructors for all struct members.
    */
  void Init(AaPlayer _pawn) {
    self.Pawn = _pawn;
    self.StrafeAxis.Init(_pawn);
    self.JumpButton.Init(_pawn, BT_JUMP);
    self.SpeedButton.Init(_pawn, BT_SPEED);
  }

  /**
    * Safely triggers each struct member to update their states.
    */
  void Poll() {
    // Sanity check - don't bother if the player is not fully initialized
    if (!self.Pawn) {
      return;
    }

    self.StrafeAxis.Poll();
    self.JumpButton.Poll();
    self.SpeedButton.Poll();
  }
}

// See above
.AaPlayer.AaInput Input;

/**
  * The current conditions for player movement.
  */
enum AaMoveState {
  AA_MOVE_AIRBORNE,
  AA_MOVE_SWIMMING,
  AA_MOVE_STEPPING
}

// See above
.AaPlayer.AaMoveState MoveState;

/**
  * This multiplier is applied to the strafing force (the added force from the
  * player's attempt to move) while the player is in the air.
  */
double AirStrafeMult;
property AirStrafeMult: AirStrafeMult;

/**
  * This multiplier is applied to the strafing force (the added force from the
  * player's attempt to move) while the player is crouching..
  */
double CrouchStrafeMult;
property CrouchStrafeMult: CrouchStrafeMult;

/**
  * This multiplier is applied to the strafing force (the added force from the
  * player's attempt to move) while the player is running.
  */
double SpeedStrafeMult;
property SpeedStrafeMult: SpeedStrafeMult;

/**
  * This multiplier is applied to the strafing force (the added force from the
  * player's attempt to move) while the player is swimming.
  */
double WaterStrafeMult;
property WaterStrafeMult: WaterStrafeMult;

/**
  * This scales the player's entire velocity while in the air.
  */
double AirResistance;
property AirResistance: AirResistance;

/**
  * This scales the player's entire velocity while underwater.
  */
double WaterResistance;
property WaterResistance: WaterResistance;

/**
  * The current amount of stamina.
  */
int CurrentStamina;

/**
  * The maximum amount of stamina.
  */
double MaxStamina;
property MaxStamina: MaxStamina;

/**
  * The amount of stamina to remove each tic while running.
  */
double StaminaDecRate;
property StaminaDecRate: StaminaDecRate;

/**
  * The amount of stamina to add each tic while not running.
  */
double StaminaIncRate;
property StaminaIncRate: StaminaIncRate;

/**
  * The number of tics the player has been in the air.
  */
int AirTics;

/**
  * The current number of jumps the player has initiated since being on the
  * ground. If the player is in the air for longer than `JUMP_GRACE_TICS` and
  * hasn't initiated a jump, this variable will automatically increase by one,
  * effectively temporarily decreasing the maximum number of jumps by one.
  */
int JumpCount;

/**
  * The number of tics a player has spent holding the jump button while it is
  * valid to do so. If zero, the player is either not trying to initiate a jump,
  * or is continuing to hold the jump button after landing.
  */
int JumpTics;

/**
  * The maximum number of jumps a player can make before they must land.
  */
int MaxJumps;
property MaxJumps: MaxJumps;

default {
  Gravity 0.8;
  Speed 0.6;
  Friction 1.0;

  AaPlayer.AirStrafeMult 0.75;
  AaPlayer.CrouchStrafeMult 0.5;
  AaPlayer.SpeedStrafeMult 2.0;
  AaPlayer.WaterStrafeMult 0.5;
  
  AaPlayer.AirResistance 0.9;
  AaPlayer.WaterResistance 0.8;

  AaPlayer.StaminaDecRate 1;
  AaPlayer.StaminaIncRate 2;
  AaPlayer.MaxStamina TICRATE * 1.0;

  AaPlayer.MaxJumps 2;

  Player.JumpZ 2.5;
  Player.ViewBobSpeed 2.0;
  Player.ViewBob 0.25;
}

void ApplyXYVelScale(double _scale) {
  self.Vel.X *= _scale;
  self.Vel.Y *= _scale;
}

/**
  * Calls the `PostBeginPlay` method of the parent class, initializes our Input
  * struct, and set our stamina to the maximum.
  */
override void PostBeginPlay() {
  Super.PostBeginPlay();
  self.Input.Init(self);
  self.CurrentStamina = self.MaxStamina;
}

/**
  * Complete rework of the `PlayerThink` method which separates and reimplements
  * functionality into multiple different methods.
  *
  * The `PlayerThink` method from the parent is never called.
  */
override void PlayerThink() {
  let _player = self.Player;

  self.Input.Poll();
  self.HandleCheats();
  self.HandleOnGround();
  self.HandleMoveState();
  self.CheckFOV();

  if (_player.InventoryTics) {
    _player.InventoryTics--;
  }

  if (_player.PlayerState == PST_DEAD) {
    self.DeathThink();
  } else {
    self.AliveThink();
  }

  if (!(_player.Cheats & CF_PREDICTING)) {
    self.HandlePlayerFlashing();
    self.CheckPoison();
    self.CheckDegeneration();
    self.CheckAirSupply();
  }

  self.TickPSprites();
}

/**
  * Handle cheat flags/movement
  */
virtual void HandleCheats() {
  let _player = self.Player;
  let _noclip = _player.Cheats & (CF_NOCLIP | CF_NOCLIP2);
  
  // The base noclip flag is required when noclipping
  if (_noclip == CF_NOCLIP2) {
    _player.Cheats &= ~CF_NOCLIP2;
  }
  
  // Ensure noclip actor flag is enabled if any noclip cheat flag is enabled
  self.bNoClip = self.Player.Cheats & _noclip || Default.bNoClip;
  
  // Disable gravity when applicable
  self.bNoGravity =
  // Player normally doesn't have gravity
  self.Default.bNoGravity ||
  // Player is flying
  self.bFly ||
  // Noclip cheat enabled (mode 2)
  (_player.Cheats & CF_NOCLIP2);
}

/**
  * Runs all methods that must be called per tick if the player is alive.
  */
virtual void AliveThink() {
  self.HandleAngle();

  if (self.HandleFrozenMovement()) {
    self.CheckCrouch(true);
    self.HandleStamina(false);
    return;
  }

  double _input_force, _input_angle;
  [_input_force, _input_angle] = self.Input.StrafeAxis.Get();

  self.CheckCrouch(false);
  self.HandleStrafeMovement(_input_force, _input_angle);
  self.HandleJumpMovement(_input_force, _input_angle);
  self.HandleViewBob();
}

/**
  * Handles all updates related to player angle.
  */
virtual void HandleAngle() {
  self.HandleQuickTurning();
  self.HandlePitch();
}

/**
  * Updates pitch.
  */
virtual void HandlePitch() {
  let _player = self.Player;

  if (!Level.IsFreelookAllowed()) {
    self.Pitch = 0.0;
  } else {
    int _pitch = _player.Cmd.Pitch;
    
    if (_pitch == -32768) {
      _player.Centering = true;
    } else if (!_player.Centering) {
      self.Pitch = Clamp(
        self.Pitch - _pitch * (360.0 / 65536.0),
        _player.MinPitch,
        _player.MaxPitch
      );
    }
  }
}

/**
  * Runs logic required for quick turning
  */
virtual void HandleQuickTurning() {
  let _player = self.Player;

  if (_player.TurnTicks && _player.TurnTicks > 0) {
    _player.TurnTicks--;
    self.Angle += 180.0 / TURN180_TICKS;
  } else {
    self.Angle += _player.Cmd.Yaw * (360.0 / 65536.0);
  }
  
  if (
    (_player.Cmd.Buttons & BT_TURN180) &&
    !(_player.OldButtons & BT_TURN180)
  ) {
    _player.TurnTicks = TURN180_TICKS;
  }
}

/**
  * Determines if the player is on ground and performs conditional updates.
  */
virtual void HandleOnGround() {
  self.Player.OnGround =
    // On top of or under the floor
    self.Pos.Z <= self.FloorZ ||
    // On top of map object
    self.bOnMobj ||
    // On top of an MBF bouncer (a type of missle)
    self.bMBFBouncer ||
    // Noclip cheat enabled (mode 2)
    self.Player.Cheats & CF_NOCLIP2;

  if (self.Player.OnGround) {
    self.AirTics = 0;
  } else {
    self.AirTics += 1;
  }
}

/**
  * Determines the general movement conditions of the player.
  */
virtual void HandleMoveState() {
  if (self.WaterLevel == 3) {
    self.MoveState = AA_MOVE_SWIMMING;
  } else if (self.Player.OnGround) {
    self.MoveState = AA_MOVE_STEPPING;
  } else {
    self.MoveState = AA_MOVE_AIRBORNE;
  }
}

/**
  * Determines if the player is frozen and runs restricted movement code if
  * true.
  */
virtual bool HandleFrozenMovement() {
  let _player = self.Player;
  UserCmd _cmd = _player.Cmd;
  bool _totally_frozen = _player.IsTotallyFrozen();
  
  if (_totally_frozen) {
    if (GameState == GS_TITLELEVEL) {
      _cmd.Buttons = 0;
    } else {
      _cmd.Buttons &= BT_USE;
    }
    _cmd.Pitch = 0;
    _cmd.Yaw = 0;
    _cmd.Roll = 0;
    _cmd.ForwardMove = 0;
    _cmd.SideMove = 0;
    _cmd.UpMove = 0;
    _Player.TurnTicks = 0;
  } else if (_player.Cheats & CF_FROZEN) {
    _cmd.ForwardMove = 0;
    _cmd.SideMove = 0;
    _cmd.UpMove = 0;
  }
  
  if (self.ReactionTime) {
    self.ReactionTime--;
  }
  
  return _totally_frozen;
}

/**
  * Calls special strafing method depending on player's `MoveState`.
  */
virtual void HandleStrafeMovement(double _input_force, double _input_angle) {
  switch(self.MoveState) {
    case(AA_MOVE_SWIMMING):
      self.HandleWaterStrafing(_input_force, _input_angle);
      break;
    case(AA_MOVE_STEPPING):
      self.HandleGroundStrafing(_input_force, _input_angle);
      break;
    case(AA_MOVE_AIRBORNE):
      self.HandleAirStrafing(_input_force, _input_angle);
      break;
  }
}

/**
  * Applies air-specific strafe movement.
  *
  * Running is not possible.
  */
virtual void HandleAirStrafing(double _input_force, double _input_angle) {
  self.HandleStamina(false);
  
  double _move_force = _input_force * self.AirStrafeMult;
  double _move_angle = self.Angle - _input_angle;

  self.Thrust(_move_force, _move_angle);
  self.ApplyXYVelScale(self.AirResistance);
}

/**
  * Applies ground-specific strafe movement.
  *
  * Takes into account running and crouching.
  */
virtual void HandleGroundStrafing(double _input_force, double _input_angle) {
  let _allow_stamina = true;

  double _move_force = _input_force;
  double _move_angle = self.Angle - _input_angle;

  if (self.CanCrouch() && self.Player.CrouchFactor != 1) {
    _move_force *= self.Player.CrouchFactor * self.CrouchStrafeMult;
    _allow_stamina = false;
  }
  
  if (_input_force < 0.5) {
    _allow_stamina = false;
  }

  if (self.HandleStamina(_allow_stamina)) {
    _move_force *= self.SpeedStrafeMult;
  }
  
  self.Friction =
    (_input_force == 0.0) ?
    0.8 * self.Default.Friction :
    self.Default.Friction;
  
  _move_force *= self.Speed;
  
  self.Thrust(_move_force, _move_angle);
}

/**
  * Applies water-specific strafe movement.
  *
  * Running is not possible within this method.
  */
virtual void HandleWaterStrafing(double _input_force, double _input_angle) {
  self.HandleStamina(false);

  double _move_force = _input_force * self.WaterStrafeMult;
  double _move_angle = self.Angle - _input_angle;
    
  self.Thrust(_move_force, _move_angle);
  self.ApplyXYVelScale(self.WaterResistance);
}

/**
  * Handles jumping.
  *
  * Coyote jumping is implemented such that if the player is in the air
  * for less than `JUMP_GRACE_TICS`, the player is still able to jump. If after
  * these tics the player is still in the air but has not initiated a jump,
  * the game will automatically increment `JumpCount` to effectively deduct
  * from the allowed jumps.
  *
  * For jumps made after `JUMP_GRACE_TICS`, a boost will be applied in the
  * strafe movement direction.
  */
virtual void HandleJumpMovement(double _input_force, double _input_angle) {
  if (self.AirTics > JUMP_GRACE_TICS && self.JumpCount == 0) {
    self.JumpCount++;
  }

  if (self.Input.JumpButton.Get()) {
    bool _initiating = self.JumpTics == 0;

    if (_initiating) {
      if (self.JumpCount >= self.MaxJumps) {
        return;
      } else {
        self.JumpCount++;
      }
    }

    if (self.JumpTics > 0 && self.AirTics == 0) {
      self.Input.JumpButton.Lock();
    }

    if (_initiating) {
      self.Vel.Z = self.JumpZ;
      self.Thrust(_input_force * self.Speed, self.Angle - _input_angle);
    } else {
      self.Vel.Z += self.JumpZ / Double(self.JumpTics);
      self.Thrust(_input_force * self.Speed / Double(self.JumpTics), self.Angle - _input_angle);
    } 

    self.JumpTics++;
    self.bOnMobj = false;
  
    if (!(self.Player.Cheats & CF_PREDICTING)) {
      A_StartSound("*jump", CHAN_BODY);
    }
  } else {
    if (self.AirTics == 0) {
      self.JumpTics = 0;
      self.JumpCount = 0;
    }

    if (self.JumpCount < self.MaxJumps) {
      self.JumpTics = 0;
    }
  }
}

/**
  * Routine for using and regenerating stamina.
  *
  * Returns `true` if stamina was used and `false` otherwise.
  */
virtual bool HandleStamina(bool _allow) {
  if (_allow) {
    if (self.Input.SpeedButton.Get()) {
      if (self.CurrentStamina > self.StaminaDecRate) {
        self.CurrentStamina -= self.StaminaDecRate;
        return true;
      } else {
        self.CurrentStamina = Min(
          self.CurrentStamina + self.StaminaIncRate,
          self.MaxStamina
        );
        self.Input.SpeedButton.Lock();
        return false;
      }
    } else {
      self.CurrentStamina = Min(
        self.CurrentStamina + self.StaminaIncRate,
        self.MaxStamina
      );
      return false;
    }
  } else {
    self.CurrentStamina = Min(
      self.CurrentStamina + self.StaminaIncRate,
      self.MaxStamina
    );
    return false;
  }
}

/**
  * Handles all screen flashing effects.
  *
  * This is intended to be called without prediction.
  */
virtual void HandlePlayerFlashing() {
  let _player = self.Player;

  if (_player.DamageCount) {
    _player.DamageCount--;
  }

  if (_player.BonusCount) {
    _player.BonusCount--;
  }
  
  if (_player.HazardCount)
  {
    _player.HazardCount--;

    if (_player.HazardInterval <= 0) {
      player.hazardinterval = 32; // repair invalid hazardinterval
      if (
        !(Level.MapTime % _player.HazardInterval) &&
        _player.HazardCount > 16 * TICRATE)
      _player.Mo.DamageMobj(NULL, NULL, 5, _player.HazardType);
    }
  }
}

/**
  * TODO: Probably remove and replace with a custom BobWeapon?
  */
virtual void HandleViewBob() {
  self.Player.ViewZ = self.Pos.Z + self.ViewHeight + self.Player.CrouchOffset;
}